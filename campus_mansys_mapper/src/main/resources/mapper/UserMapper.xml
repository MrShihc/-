<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.mapper.UserMapper">

    <!-- 查询出所有的用户信息 -->
    <select id="getUserList" resultType="UserBean">
        select * from tb_user
    </select>

    <!-- 查询出所有的学生信息以及班级信息 -->
    <!-- 配置手动映射 -->
    <resultMap id="stuGrade" type="Student">
        <id property="sid" column="sid"></id>
        <result property="sname" column="sname" />
        <result property="age" column="age" />
        <result property="birthday" column="birthday" />
        <result property="address" column="address" />
        <association property="grade" javaType="Grade">
            <result property="gid" column="gid" />
            <result property="gname" column="gname" />
        </association>
    </resultMap>
    <select id="getStuList" resultMap="stuGrade">
        SELECT
            stu.*,g.*
        FROM
            tb_student stu
            LEFT JOIN tb_student_grade sg ON stu.sid = sg.sid
            LEFT JOIN tb_grade g ON sg.gid = g.gid
    </select>

    <!-- 查询出所有的班级信息 -->
    <select id="getGradelist" resultType="Grade">
        select * from tb_grade
    </select>

    <!-- 三级联动 -->
    <select id="getProlistById" resultType="CityBean">
        select * from tb_city where pid =#{id}
    </select>

    <!-- 保存学生信息 -->
    <!--
        获取自增主键id的值
        useGeneratedKeys:是否获取自增主键id的值，true-获取，false-不获取
        keyProperty:对应实体类的属性名称
        keyColumn:对应数据库的属性列名
        useGeneratedKeys="true" keyProperty="sid" keyColumn="sid"
    -->
    <insert id="saveStuInfo" parameterType="Student">
        <!-- 获取插入后的主键id的值
            resultType:参数类型
            keyProperty:获取对应的实体类中的字段名称
            keyColumn:对应数据库的id名称
            order:获取插入之前的还是之后的，AFTER-之后   BEFORE-之前
        -->
        <selectKey resultType="long" keyProperty="sid" keyColumn="sid" order="AFTER" >
            select last_insert_id();
        </selectKey>
        insert into tb_student(sname,age,birthday,address)
        VALUES (#{sname},#{age},#{birthday},#{address})
    </insert>

    <!-- 保存学生和班级关联的信息 -->
    <insert id="saveStuGradeInfo">
        insert into tb_student_grade(sid,gid)
        values (#{sid},#{gid})
    </insert>

    <!-- 根据sid批量删除学生信息 -->
    <delete id="deleteStuBatchBySid">
        delete from tb_student where sid=#{sid}
    </delete>

    <!-- 根据sid皮脸删除学生和班级关联信息 -->
    <delete id="deleteStuGradeBySid">
        delete from tb_student_grade where sid=#{sid}
    </delete>

    <!-- 根据学生id查询学生信息 -->
    <select id="saveStuById" resultMap="stuGrade">
        SELECT
            stu.*,g.*
        FROM
            tb_student stu
            LEFT JOIN tb_student_grade sg ON stu.sid = sg.sid
            LEFT JOIN tb_grade g ON sg.gid = g.gid
        WHERE stu.sid = #{sid}
    </select>

    <!-- 根据sid修改学生信息 -->
    <update id="saveStuInfoBySid" parameterType="Student">
        UPDATE tb_student
        SET sname = #{sname},age = #{age},birthday=#{birthday},address=#{address} where sid=#{sid}
    </update>

    <!-- 修改学生与班级关联信息 -->
    <update id="saveStuGradeInfoById">
        update tb_student_grade set gid=#{gid} where sid=#{sid}
    </update>
</mapper>